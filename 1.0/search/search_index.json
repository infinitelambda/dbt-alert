{"config":{"lang":["en"],"separator":"[\\s\\-,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"\ud83d\udce6 Overview","text":""},{"location":"index.html#dbt-alert","title":"dbt-alert","text":"<p>Triggering alerts from Data Warehouse managed by dbt \ud83d\ude80</p> <p>Who is this for?</p> <p>For the dbt-ers who want:</p> <ul> <li>To leverage the notification feature of the Data Warehouse (e.g. Snowflake Notification Integration)</li> <li>To manage the alerting jobs via SQL script (which is similar to dbt singular test)</li> </ul>"},{"location":"index.html#installation","title":"Installation","text":"<ul> <li>Add to <code>packages.yml</code> file:</li> </ul> <pre><code>packages:\n  - package: infinitelambda/dbt_alert\n    version: [\"&gt;=1.0.0\", \"&lt;1.1.0\"]\n</code></pre> <p>Or use the latest version from git:</p> <pre><code>packages:\n  - git: \"https://github.com/infinitelambda/dbt-alert\"\n    revision: &lt;release version or tag&gt;\n</code></pre> <p>And run <code>dbt deps</code> to install the package!</p>"},{"location":"index.html#quick-demo","title":"Quick Demo","text":"<p>Jump into Getting Started page for more details on how to start using this package with Snowflake.</p> <p>\ud83d\udcf9 Here is a quick live demo:</p> <p>Quick demo dbt-alert package - Watch Video</p>"},{"location":"index.html#variables","title":"Variables","text":"<p>See <code>dbt_project.yml</code> file</p> <p>Go to <code>vars</code> section here \ud83c\udfc3</p> <p>We managed to provide the inline comments only for now, soon to have the dedicated page for more detail explanation.</p> <p>Here are the full list of built-in variables:</p> <ul> <li><code>dbt_alert__mailing_list</code>: Mandatory</li> <li><code>dbt_alert__jobs</code>: Mandatory if using <code>execute_jobs</code> macro</li> <li><code>dbt_alert__dbt_cloud_access_url</code></li> <li><code>dbt_alert_notification_integration_id</code></li> <li><code>dbt_alert_notification_integration_usage_role</code></li> </ul>"},{"location":"index.html#how-to-contribute","title":"How to Contribute \u2764\ufe0f","text":"<p><code>dbt-alert</code> is an open-source dbt package. Whether you are a seasoned open-source contributor or a first-time committer, we welcome and encourage you to contribute code, documentation, ideas, or problem statements to this project.</p> <p>\ud83d\udc49 See CONTRIBUTING guideline for more details or check out CONTRIBUTING.md</p> <p>\ud83c\udf1f And then, kudos to our beloved Contributors:</p> <p> </p>"},{"location":"index.html#about-infinite-lambda","title":"About Infinite Lambda","text":"<p>Infinite Lambda is a cloud and data consultancy. We build strategies, help organizations implement them, and pass on the expertise to look after the infrastructure.</p> <p>We are an Elite Snowflake Partner, a Platinum dbt Partner, and a two-time Fivetran Innovation Partner of the Year for EMEA.</p> <p>Naturally, we love exploring innovative solutions and sharing knowledge, so go ahead and:</p> <p>\ud83d\udd27 Take a look around our Git</p> <p>\u270f\ufe0f Browse our tech blog</p> <p>We are also chatty, so:</p> <p>\ud83d\udc40 Follow us on LinkedIn</p> <p>\ud83d\udc4b\ud83c\udffc Or just get in touch</p> <p></p>"},{"location":"contributing.html","title":"Contributing to <code>dbt-alert</code>","text":"<p><code>dbt-alert</code> is open-source dbt package \u2764\ufe0f. Whether you are a seasoned open-source contributor or a first-time committer, we welcome and encourage you to contribute code, documentation, ideas, or problem statements to this project.</p> <ul> <li>Contributing to <code>dbt-alert</code></li> <li>About this document</li> <li>Getting the code<ul> <li>Installing git</li> <li>External contributors</li> </ul> </li> <li>Setting up an environment<ul> <li>Tools</li> <li>Get dbt profile ready</li> </ul> </li> <li>Linting</li> <li>Testing</li> <li>Committing</li> <li>Submitting a Pull Request</li> </ul>"},{"location":"contributing.html#about-this-document","title":"About this document","text":"<p>There are many ways to contribute to the ongoing development of <code>dbt-alert</code>, such as by participating in discussions and issues.</p> <p>The rest of this document serves as a more granular guide for contributing code changes to <code>dbt-alert</code> (this repository). It is not intended as a guide for using <code>dbt-alert</code>, and some pieces assume a level of familiarity with Python development with <code>poetry</code>. Specific code snippets in this guide assume you are using macOS or Linux and are comfortable with the command line.</p> <ul> <li>Branches: All pull requests from community contributors should target the <code>main</code> branch (default). If the change is needed as a patch for a minor version of dbt that has already been released (or is already a release candidate), a maintainer will backport the changes in your PR to the relevant \"latest\" release branch (<code>1.0.&lt;latest&gt;</code>, <code>1.1.&lt;latest&gt;</code>, ...). If an issue fix applies to a release branch, that fix should be first committed to the development branch and then to the release branch (rarely release-branch fixes may not apply to <code>main</code>).</li> <li>Releases: Before releasing a new minor version, we prepare a series of beta release candidates to allow users to test the new version in live environments. This is an important quality assurance step, as it exposes the new code to a wide variety of complicated deployments and can surface bugs before official release. Releases are accessible via pip.</li> </ul>"},{"location":"contributing.html#getting-the-code","title":"Getting the code","text":""},{"location":"contributing.html#installing-git","title":"Installing git","text":"<p>You will need <code>git</code> in order to download and modify the <code>dbt-alert</code> source code. On macOS, the best way to download git is to just install Xcode.</p>"},{"location":"contributing.html#external-contributors","title":"External contributors","text":"<p>You can contribute to <code>dbt-alert</code> by forking the <code>dbt-alert</code> repository. For a detailed overview on forking, check out the GitHub docs on forking. In short, you will need to:</p> <ol> <li>Fork the <code>dbt-alert</code> repository</li> <li>Clone your fork locally</li> <li>Check out a new branch for your proposed changes</li> <li>Push changes to your fork</li> <li>Open a pull request against <code>infintelambda/dbt-alert</code> from your forked repository</li> </ol>"},{"location":"contributing.html#setting-up-an-environment","title":"Setting up an environment","text":"<p>There are some tools that will be helpful to you in developing locally. While this is the list relevant for <code>dbt-alert</code> development, many of these tools are used commonly across open-source python projects.</p>"},{"location":"contributing.html#tools","title":"Tools","text":"<p>We will buy <code>poetry</code> in <code>dbt-alert</code> development and testing.</p> <p>So first install poetry via pip or via the official installer, please help to check right version used in poetry.lock file. Then, start installing the local environment:</p> <pre><code>poetry install\npoetry shell\npoe git-hooks\n</code></pre>"},{"location":"contributing.html#get-dbt-profile-ready","title":"Get dbt profile ready","text":"<p>Please help to check the sample script to initialize Snowflake environment in <code>integreation_tests/ci</code> directory, and get your database freshly created.</p> <p>Next, you should follow dbt profile instruction and setting up your dedicated profile. Again, you could try our sample in the same above directory.</p> <p>Run <code>poe dbt-alert-verify</code> for verifying the connection \u2705</p>"},{"location":"contributing.html#linting","title":"Linting","text":"<p>We're trying to also maintain the code quality leveraging sqlfluff.</p> <p>It is highly encouraged that you format the code before committing using the below <code>poe</code> helpers:</p> <pre><code>poe lint    # check your code, we run this check in CI\npoe format  # format your code to match sqlfluff configs\n</code></pre>"},{"location":"contributing.html#testing","title":"Testing","text":"<p>Once you're able to manually test that your code change is working as expected, it's important to run existing automated tests, as well as adding some new ones. These tests will ensure that:</p> <ul> <li>Your code changes do not unexpectedly break other established functionality</li> <li>Your code changes can handle all known edge cases</li> <li>The functionality you're adding will keep working in the future</li> </ul> <p>See here for details for running existing integration tests and adding new ones:</p> <p>An integration test typically involves making 1) a new seed file 2) a new model file 3) a generic test to assert anticipated behaviour.</p> <p>Once you've added all of these files, in the <code>poetry shell</code>, you should be able to run:</p> <pre><code>poe dbt-alert-test\n</code></pre>"},{"location":"contributing.html#committing","title":"Committing","text":"<p>Upon running <code>poe git-hooks</code> we will make sure that you provide as the clean &amp; neat commit messages as possible.</p> <p>There are 2 main checks:</p> <ul> <li>Trailing whitespace: If any, it will try to fix it for us, and we have to stage the changes before committing</li> <li>Commit message: It must follow the commitizen convention as <code>{change_type}: {message}</code></li> <li><code>change_type</code>: is one of <code>feat|fix|chore|refactor|perf|BREAKING CHANGE</code></li> </ul>"},{"location":"contributing.html#submitting-a-pull-request","title":"Submitting a Pull Request","text":"<p>Code can be merged into the current development branch <code>main</code> by opening a pull request. A <code>dbt-alert</code> maintainer will review your PR. They may suggest code revision for style or clarity, or request that you add unit or integration test(s). These are good things! We believe that, with a little bit of help, anyone can contribute high-quality code.</p> <p>Automated tests run via GitHub Actions. If you're a first-time contributor, all tests (including code checks and unit tests) will require a maintainer to approve. Changes in the <code>dbt-alert</code> repository trigger integration tests against Snowflake \ud83d\udcb0.</p> <p>Once all tests are passing and your PR has been approved, a <code>dbt-alert</code> maintainer will merge your changes into the active development branch. And that's it!</p> <p>Happy Developing \ud83c\udf89</p>"},{"location":"getting-started-snowflake.html","title":"Getting Started with Snowflake","text":""},{"location":"getting-started-snowflake.html#getting-started-with-dbt_alert-in-snowflake","title":"Getting Started with <code>dbt_alert</code> in Snowflake","text":"<p>It is recommended to check out the Sending Email Notifications in Snowflake.</p> <p>Before we can utilize the package for adding the first job, we need to set up the Integration objects using <code>ACCOUNTADMIN</code> role. This is the essential steps to let us prepare the stuff.</p>"},{"location":"getting-started-snowflake.html#optional-create-a-snowflake-user","title":"[Optional] Create a Snowflake User","text":"<p>UPDATE: It seems that we don't need this step anymore</p> <p>We need an associated Snowflake User that holds the (Slack/MS Teams) Channel's email address.</p> <p>Login to Snowflake using this new user's credential and get the email verification done!</p> <p>Sample script for User creation:</p> <pre><code>use role securityadmin;\ncreate or replace user user_email_alert with\n  password='&lt;hidden&gt;'\n  email = 'data_failure-hashingstringhere@sample.slack.com';\n</code></pre>"},{"location":"getting-started-snowflake.html#create-the-notification-integration-object","title":"Create the Notification Integration object","text":"<p>Make sure that the Notification Integration object gets created manually first using the <code>ACCOUNTADMIN</code> role.</p> <p>Its script will be generated by <code>macros/resource/create_or_get_resource.sql</code> macro:</p> <pre><code>dbt run-operation create_or_get_resource --args '{create: true}'\n</code></pre> \ud83d\udc49 Sample generated script <pre><code>use role accountadmin;\ncreate or replace notification integration ni_dbt_alert__dbt_alert_test__dev\n  type = email\n  allowed_recipients = ('channel-hashhashash@yourvalue.slack.com')\n  enabled = true\n  comment = \"DEV Notification Integration object used for YOUR_DBT_PROJECT dbt project\";\ngrant usage on integration ni_dbt_alert__dbt_alert_test__dev to role YOUR_PROFILE_ROLE;\n</code></pre>"},{"location":"getting-started-snowflake.html#send-a-test-email","title":"Send a test email","text":"<p>Switch to the <code>YOUR_PROFILE_ROLE</code> role and execute the <code>send_email</code> function:</p> <pre><code>use role &lt;YOUR_PROFILE_ROLE&gt;;\ncall system$send_email(\n    '&lt;YOUR_NOTIFICATION_INTEGRATION_NAME&gt;',\n    '&lt;YOUR_CHANNEL_EMAIL&gt;',\n    '\u26a0\ufe0f Alert!', -- email title\n    'This is the testing alert', -- email body\n    'text/html'\n);\n</code></pre> <p>Here is the sample result:</p> <p></p> <p>Now, you're ready to create the first job \ud83d\ude80</p>"},{"location":"triggering-your-job.html","title":"How To Trigger Your Jobs","text":"<p>Let's add your jobs then utilize the package <code>dbt-alert</code> to trigger your jobs.</p> <ul> <li>How To Trigger Your Jobs</li> <li>Adding Your Jobs<ul> <li>Create a Job Macro:</li> <li>\u270d\ufe0f Modify the <code>alert_query</code>:</li> <li>\u270d\ufe0f Customize the <code>alert_title</code>:</li> <li>Add your job name to <code>dbt_alert__jobs</code> variable</li> </ul> </li> <li>Triggering Your Jobs<ul> <li>Using <code>run-operation</code></li> <li>Using <code>on-run-end</code> Hook</li> </ul> </li> </ul>"},{"location":"triggering-your-job.html#adding-your-jobs","title":"Adding Your Jobs","text":"<p>To set up a job that triggers alerts, follow these steps:</p>"},{"location":"triggering-your-job.html#create-a-job-macro","title":"Create a Job Macro:","text":"<p>Place your job macro under the <code>jobs/</code> directory.</p> <p>The macro name MUST start with <code>dbt_alert_job__</code>. Eg: <code>jobs/dbt_alert_job__sample_1.sql</code>.</p> <p>This macro will help return <code>alert_query</code> and <code>alert_title</code></p> <p>Sample of your macro:</p> <pre><code>{% macro dbt_alert_job__sample_1() %}\n\n    {% set alert_query -%}\n\n        /*\n          Your alert query to trigger alert\n        */\n\n    {%- endset %}\n\n    {% set alert_title = \"Your email title\" %}\n\n    {{ return((alert_query, alert_title)) }}\n\n{% endmacro %}\n</code></pre> <p>\ud83d\udcd6 Check integration_tests/macros/sample-jobs for your reference.</p>"},{"location":"triggering-your-job.html#modify-the-alert_query","title":"\u270d\ufe0f Modify the <code>alert_query</code>:","text":"<p>Inside the macro, set the <code>alert_query</code>. It should follow the same approach as the dbt singuar test query.</p> <p>Sample script:</p> <pre><code>{% set alert_query -%}\n    /*\n      Your rule description\n    */\n    with failures as ( -- your query should be the same approach as dbt singuar test query\n\n        select  1\n\n    )\n\n    select\n        count(*) as failed_count\n    from failures\n    where 1=1\n        and   -- your condition to implement the rule e.g. datediff(hour, max_&lt;timestamp&gt;, sysdate()) &gt; 3\n\n{%- endset %}\n</code></pre>"},{"location":"triggering-your-job.html#customize-the-alert_title","title":"\u270d\ufe0f Customize the <code>alert_title</code>:","text":"<p>Set the <code>alert_title</code> to a concise email subject for your alert.</p> <p>Sample script:</p> <pre><code>{% set alert_title = \"\u26a0\ufe0f Sample Alert\" %} {# your concise email title #}\n</code></pre>"},{"location":"triggering-your-job.html#add-your-job-name-to-dbt_alert__jobs-variable","title":"Add your job name to <code>dbt_alert__jobs</code> variable","text":"<p>In <code>dbt_project.yml</code> add name of alert job (exclude the prefix <code>dbt_alert_job__</code>) to variable <code>dbt_alert__jobs</code> so that macro <code>execute_jobs</code> can trigger the jobs that you expect.</p> <p>For example:</p> <pre><code>vars:\n  dbt_alert__jobs: \"sample_1,sample_2\"\n</code></pre>"},{"location":"triggering-your-job.html#triggering-your-jobs","title":"Triggering Your Jobs","text":"<p>The alert job can be executed using either the <code>run-operation</code> command or the <code>on-run-end</code> hook.</p>"},{"location":"triggering-your-job.html#using-run-operation","title":"Using <code>run-operation</code>","text":"<p>Run the following command to execute the alert job (replace <code>sample_1</code> with your actual job name):</p> <pre><code>  dbt run-operation execute_job --args '{\"job_name\": \"sample_1\"}'\n  # or a dry run\n  dbt run-operation execute_job --args '{\"job_name\": \"sample_1\", \"dry_run\": True}'\n</code></pre> <p>If you expect to execute multiple jobs (replace <code>sample_2, sample_3</code> with your actual job name):</p> <pre><code>  dbt run-operation execute_jobs --vars '{dbt_alert__jobs: \"sample_2,sample_3\"}'\n  # or a dry run\n  dbt run-operation execute_jobs --vars '{dbt_alert__jobs: \"sample_2,sample_3\"}' --args '{dry_run: true}'\n</code></pre>"},{"location":"triggering-your-job.html#using-on-run-end-hook","title":"Using <code>on-run-end</code> Hook","text":"<p>For single alert job:</p> <pre><code>  on-run-end:\n    - \"{{ dbt_alert.execute_job(job_name='sample_1') }}\"\n</code></pre> <p>For multiple alert jobs:</p> <pre><code>  vars:\n    dbt_alert__jobs: \"sample_2,sample_3\"\n\n  on-run-end:\n    - \"{{ dbt_alert.execute_jobs() }}\"\n</code></pre> <p>Here is a sample alert sent to a Slack channel</p> <p></p> <p></p> <p>In the above sample result, you might notice 2 minor useful things (which are built automatically):</p> <ul> <li>Job metadata will be added together with the configured Email Title e.g. <code>\u26a0\ufe0f Sample Alert [1] | 2024-07-10 12:05:14 (UTC)</code><ul> <li>Configured Email Title = <code>\u26a0\ufe0f Sample Alert</code></li> <li><code>Failed Count</code> = <code>[1]</code></li> <li><code>Trigger At Timestamp</code> = <code>2024-07-10 12:05:14 (UTC)</code></li> </ul> </li> <li>Run metadata is enriched in the Email Body<ul> <li><code>Run URL</code>: <code>run/{runid}</code> hyperlink will be the link to the dbt Cloud Run URL if you run the job over there</li> <li><code>Query Used</code>: Actual executed query run by the job</li> </ul> </li> </ul> <p>Happy dbt-ing and mindful alerting \ud83d\ude80 \ud83d\udcab</p>"}]}